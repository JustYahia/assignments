{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from 'src/enveronments/environment-development';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst {\n  apiUrl\n} = environment;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    get isLoggedIn() {\n      return !!this.user;\n    }\n    constructor(http) {\n      this.http = http;\n      this.user$$ = new BehaviorSubject(undefined);\n      this.user$ = this.user$$.asObservable();\n      this.usersList = [];\n      this.picturesToBeBuyIt = [];\n      this.USER_KEY = '[user]';\n      this.currentUser = undefined;\n      try {\n        const lsUser = localStorage.getItem(this.USER_KEY) || '';\n        this.user = JSON.parse(lsUser);\n        this.currentUser = this.user?.username;\n        // console.log(this.user?.username);\n        // console.log(this.currentUser);\n      } catch (error) {\n        this.user = undefined;\n      }\n    }\n    login(myUser) {\n      this.user = {\n        username: myUser,\n        password: '11111111'\n      };\n      localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n    }\n    logout() {\n      this.user = undefined;\n      localStorage.removeItem(this.USER_KEY);\n    }\n    createPicture(picName, pickMaterials, picCategory, picImage, picPrice, picDescription) {\n      return this.http.post(`https://my-project-angular-4dd57-default-rtdb.europe-west1.firebasedatabase.app/${picCategory}.json`, {\n        picName,\n        pickMaterials,\n        picCategory,\n        picImage,\n        picPrice,\n        picDescription\n      });\n    }\n    createUser(username, firstname, secondname, lastname, email, phone, country, place, postcode, street, password, rePassword) {\n      return this.http.post(`${apiUrl}/users.json`, {\n        username,\n        firstname,\n        secondname,\n        lastname,\n        email,\n        phone,\n        country,\n        place,\n        postcode,\n        street,\n        password,\n        rePassword\n      });\n    }\n    getUsers() {\n      const {\n        apiUrl\n      } = environment;\n      return this.http.get(`${apiUrl}/users.json`).pipe(map(resData => {\n        const usersArray = [];\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key)) {\n            usersArray.push({\n              userId: key,\n              ...resData[key]\n            });\n          }\n        }\n        return usersArray;\n      })).subscribe({\n        next: users => {\n          this.usersList = users;\n        },\n        error: err => {\n          console.log(`Error: ${err}`);\n        }\n      });\n    }\n    getUserDetails() {\n      const {\n        apiUrl\n      } = environment;\n      return this.http.get(`${apiUrl}/users.json`).pipe(map(resData => {\n        const usersArray = [];\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key)) {\n            usersArray.push({\n              userId: key,\n              ...resData[key]\n            });\n          }\n        }\n        return usersArray;\n      }));\n    }\n    getUser(id) {\n      return this.http.get(`${apiUrl}/users/${id}.json`);\n    }\n    updateUser(username, firstname, secondname, lastname, email, phone, country, place, postcode, street, id) {\n      return this.http.put(`${apiUrl}/users/${id}.json`, {\n        username,\n        firstname,\n        secondname,\n        lastname,\n        email,\n        phone,\n        country,\n        place,\n        postcode,\n        street\n      });\n    }\n    deleteItemFromCart() {\n      return this.http.delete(`${apiUrl}/MyCart.json`).subscribe();\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}